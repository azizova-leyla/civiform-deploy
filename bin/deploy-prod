#! /usr/bin/env bash

# DOC: Deploy an image to production along with cloudformation stack changes.
# DOC: Deploys the current staging image if none is passed in.

function log_error() {
  echo "[$(date +'%Y-%m-%dT%H:%M:%S%z')]: $*" >&2
}

set -e
set +x

export AWS_DEFAULT_REGION=us-west-2
REGION=us-west-2

environment_name="prod"
image_name="public.ecr.aws/t1q6b4h2/universal-application-tool:latest"

if [[ -n "${1}" ]]; then
  environment_name="${1}"
fi

if [[ -n "${2}" ]]; then
  image_name="${2}"
fi

stack_name=""
image_tag=""

case "${environment_name}" in
  prod)
      stack_name="civiform"
      image_tag="prod"
      ;;
  staging)
      stack_name="civiform-staging"
      image_tag="latest"
      ;;
  *)
      log_error "Unsupported environment. Only 'prod' or 'staging' are supported"
      exit 1
      ;;
esac

echo "Deploying image ${image_name} to ${environment_name}"

aws ecr-public get-login-password --region us-east-1 |
  docker login --username AWS --password-stdin public.ecr.aws/t1q6b4h2

docker pull "${image_name}"

docker tag \
  "${image_name}" \
  public.ecr.aws/t1q6b4h2/universal-application-tool:${image_tag}

docker push public.ecr.aws/t1q6b4h2/universal-application-tool:${image_tag}

TIMESTAMP=$(date +%s)

aws s3 sync ./infra s3://seattle-civiform-cftmpl/${TIMESTAMP}
aws cloudformation update-stack \
  --region ${REGION} \
  --stack-name "${stack_name}" \
  --template-url "https://seattle-civiform-cftmpl.s3-${REGION}.amazonaws.com/$TIMESTAMP/stack.yaml" \
  --parameters "[{\"ParameterKey\": \"Timestamp\", \"ParameterValue\": \"$TIMESTAMP\"}, {\"ParameterKey\": \"Environment\", \"ParameterValue\": \"${environment_name}\"}]"

aws cloudformation wait stack-update-complete --stack-name "${stack_name}"

ECSSERVICE=$(aws cloudformation describe-stacks \
  --region ${REGION} \
  --stack-name "${stack_name}" |
    jq -r '.Stacks[0].Outputs[] | select(.OutputKey == "ECSService") | .OutputValue')

ECSCLUSTER=$(aws cloudformation describe-stacks \
  --region ${REGION} \
  --stack-name "${stack_name}" |
    jq -r '.Stacks[0].Outputs[] | select(.OutputKey == "ECSCluster") | .OutputValue')

aws ecs update-service \
  --region=${REGION} \
  --cluster "$ECSCLUSTER" \
  --service "$ECSSERVICE" \
  --force-new-deployment

deadline=$(($(date +%s) + 900))
until aws ecs wait services-stable --region=${REGION} --cluster "$ECSCLUSTER" --services "$ECSSERVICE"; do
  if (( $(date +%s) > $deadline )); then
    log_error "deadline exceeded waiting for service update to stabilize"
    exit 1
  fi
done
